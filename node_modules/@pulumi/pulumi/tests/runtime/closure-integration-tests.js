"use strict";
// Copyright 2024-2024, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const execa_1 = __importDefault(require("execa"));
const fs = __importStar(require("fs/promises"));
const path = __importStar(require("path"));
const process = __importStar(require("process"));
const tmp = __importStar(require("tmp"));
const pack_1 = require("./pack");
// Write a package.json that installs the local pulumi package and ensures we
// have the right typescript version.
function writePackageJSON(dir, pulumiPackagePath, typescriptVersion, nodeTypesVersion) {
    return __awaiter(this, void 0, void 0, function* () {
        const packageJSON = {
            name: "closure-tests",
            version: "1.0.0",
            license: "Apache-2.0",
            dependencies: {
                "@pulumi/pulumi": pulumiPackagePath,
                "@types/mocha": "^9.0.0",
                "@types/node": nodeTypesVersion,
                "@types/semver": "^7.5.6",
                mocha: "^9.0.0",
                "mocha-suppress-logs": "^0.5.1",
                mockpackage: "file:mockpackage-src",
                semver: "^7.5.4",
                "ts-node": "^7.0.1",
                typescript: typescriptVersion,
            },
            resolutions: {
                typescript: typescriptVersion,
            },
        };
        yield fs.writeFile(path.join(dir, "package.json"), JSON.stringify(packageJSON, undefined, 4));
    });
}
function copyDir(src, dest) {
    return __awaiter(this, void 0, void 0, function* () {
        const entries = yield fs.readdir(src, { recursive: true, withFileTypes: true } /* recursive option is new in node 18 */);
        for (const entry of entries) {
            const srcPath = path.join(entry.path, entry.name);
            const destPath = srcPath.replace(src, dest);
            const destDir = path.dirname(destPath);
            if (entry.isFile()) {
                yield fs.mkdir(destDir, { recursive: true });
                yield fs.copyFile(srcPath, destPath);
            }
        }
    });
}
function run(typescriptVersion, nodeTypesVersion) {
    return __awaiter(this, void 0, void 0, function* () {
        const tmpDir = tmp.dirSync({ prefix: "closure-test-", unsafeCleanup: true });
        const sdkRoot = path.join(__dirname, "..", "..", "..");
        const sdkRootBin = path.join(sdkRoot, "bin");
        // Add a random suffix to the package name to avoid any issues with yarn caching the tgz.
        const packageName = `pulumi-${crypto_1.randomInt(10000, 99999)}.tgz`;
        const pulumiPackagePath = path.join(tmpDir.name, packageName);
        yield pack_1.pack(sdkRootBin, pulumiPackagePath);
        yield writePackageJSON(tmpDir.name, pulumiPackagePath, typescriptVersion, nodeTypesVersion);
        yield copyDir(path.join(sdkRoot, "tests", "runtime", "testdata", "closure-tests"), tmpDir.name);
        yield execa_1.default("yarn", ["install"], { cwd: tmpDir.name });
        yield execa_1.default("yarn", ["tsc"], { cwd: tmpDir.name });
        yield execa_1.default("yarn", ["mocha", "--timeout", "30000", "test.js"], {
            cwd: tmpDir.name,
            stdio: "inherit",
        });
        tmpDir.removeCallback();
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        for (const [ts, typesNode] of [
            ["~3.8.3", "^17"],
            ["<4.8.0", "^20"],
            ["^4.9.5", "^20"],
            ["<5.2.0", "^20"],
            ["^5.2.0", "^20"],
        ]) {
            yield run(ts, typesNode);
        }
    });
}
main().catch((error) => {
    console.error(error);
    process.exit(1);
});
//# sourceMappingURL=closure-integration-tests.js.map