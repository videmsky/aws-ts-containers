"use strict";
// Copyright 2024-2024, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const execa_1 = __importDefault(require("execa"));
const fs = __importStar(require("fs/promises"));
const path = __importStar(require("path"));
const process = __importStar(require("process"));
const tmp = __importStar(require("tmp"));
const pack_1 = require("./pack");
// Write a package.json that installs the local pulumi package and optional dependencies.
function writePackageJSON(dir, pulumiPackagePath, dependencies) {
    return __awaiter(this, void 0, void 0, function* () {
        const packageJSON = {
            name: "install-package-tests",
            version: "1.0.0",
            license: "Apache-2.0",
            dependencies: Object.assign({ "@pulumi/pulumi": pulumiPackagePath }, dependencies),
        };
        yield fs.writeFile(path.join(dir, "package.json"), JSON.stringify(packageJSON, undefined, 4));
    });
}
function writeTSConfig(dir) {
    return __awaiter(this, void 0, void 0, function* () {
        const tsconfigJSON = {
            compilerOptions: {
                strict: true,
                target: "es2016",
                module: "commonjs",
                moduleResolution: "node",
                declaration: true,
                resolveJsonModule: true,
                sourceMap: true,
                stripInternal: true,
                experimentalDecorators: true,
                pretty: true,
                noFallthroughCasesInSwitch: true,
                noImplicitReturns: true,
                forceConsistentCasingInFileNames: true,
                esModuleInterop: true,
            },
            include: ["index.ts"],
        };
        yield fs.writeFile(path.join(dir, "tsconfig.json"), JSON.stringify(tsconfigJSON, undefined, 4));
    });
}
// A simple TypeScript Pulumi program to test that we can load and run TypeScript code.
function writeProgram(dir, projectName) {
    return __awaiter(this, void 0, void 0, function* () {
        const indexTS = `import * as pulumi from "@pulumi/pulumi";
pulumi.runtime.serializeFunction(() => 42);
export const test: number = 42;
`;
        yield fs.writeFile(path.join(dir, "index.ts"), indexTS);
        const project = `name: ${projectName}
runtime: nodejs
backend:
  url: 'file://~'
`;
        yield fs.writeFile(path.join(dir, "Pulumi.yaml"), project);
    });
}
function exec(command, args, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const message = `$ ${command} ${args.join(" ")}'\n`;
        const result = yield execa_1.default(command, args, options);
        return message + result.stdout;
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const sdkRoot = path.join(__dirname, "..", "..", "..");
        const sdkRootBin = path.join(sdkRoot, "bin");
        const tmpPackageDir = tmp.dirSync({ prefix: "pulumi-package-", unsafeCleanup: true });
        try {
            // Add a random suffix to the package name to avoid any issues with yarn caching the tgz.
            const packageName = `pulumi-${crypto_1.randomInt(10000, 99999)}.tgz`;
            const pulumiPackagePath = path.join(tmpPackageDir.name, packageName);
            yield pack_1.pack(sdkRootBin, pulumiPackagePath);
            const packageManagers = [
                {
                    name: "npm",
                    // This version doesn't install peer dependencies automatically.
                    version: "^6.0.0",
                },
                {
                    name: "npm",
                    version: "*",
                },
                {
                    name: "yarn",
                    // This version doesn't install peer dependencies automatically.
                    version: "^1.0.0",
                },
                // We don't support yarn >= 2 yet.
                // {
                //     packageManager: "yarn",
                //     version: "*", // Latest version.
                // },
                {
                    name: "pnpm",
                    version: "*",
                },
            ];
            // Dependencies to add to package.json.
            const dependencies = [
                {
                    // No explicit typescript or ts-node versions, use the vendored versions.
                    typescript: undefined,
                    "ts-node": undefined,
                },
                {
                    typescript: "~3.8.3",
                    "ts-node": "^7.0.1",
                },
                {
                    typescript: "^4.0.0",
                    "ts-node": undefined,
                },
                {
                    typescript: "^5.0.0",
                    "ts-node": undefined,
                },
                {
                    typescript: "^5.0.0",
                    "ts-node": "^10.0.0",
                },
            ];
            for (const pm of packageManagers) {
                for (const deps of dependencies) {
                    const tmpDir = tmp.dirSync({ prefix: "install-test-", unsafeCleanup: true });
                    try {
                        yield runTest(tmpDir, pulumiPackagePath, pm.name, pm.version, deps);
                    }
                    finally {
                        tmpDir.removeCallback();
                    }
                }
            }
        }
        finally {
            tmpPackageDir.removeCallback();
        }
    });
}
function runTest(tmpDir, pulumiPackagePath, packageManager, packageManagerVersion, peerDeps) {
    return __awaiter(this, void 0, void 0, function* () {
        yield writePackageJSON(tmpDir.name, pulumiPackagePath, peerDeps);
        yield writeTSConfig(tmpDir.name);
        const projectName = `install-test-${packageManager}-${packageManagerVersion}`.replace(/[^a-zA-Z0-9]/g, "-");
        yield writeProgram(tmpDir.name, projectName);
        const dependencies = Object.entries(peerDeps)
            .filter(([_, v]) => v !== undefined)
            .map(([p, v]) => `${p}:${v}`)
            .join(", ");
        const dependenciesString = dependencies.length > 0 ? ` with ${dependencies}` : "";
        let logs = "";
        // Install the package manager to test.
        logs += yield exec(`corepack`, ["enable"], { cwd: tmpDir.name });
        logs += yield exec(`corepack`, ["use", `${packageManager}@${packageManagerVersion}`], { cwd: tmpDir.name });
        const env = {
            PULUMI_CONFIG_PASSPHRASE: "test",
            PULUMI_HOME: tmpDir.name,
        };
        // Up and down a test stack to ensure we're able to load & run typescript code.
        const stackName = `install-test-${crypto_1.randomInt(10000, 99999)}`;
        try {
            logs += yield exec("pulumi", ["stack", "init", stackName], {
                cwd: tmpDir.name,
                env,
            });
            logs += yield exec("pulumi", ["up", "--stack", stackName, "--skip-preview"], {
                cwd: tmpDir.name,
                env,
            });
            console.log(`✅ ${packageManager}@${packageManagerVersion}${dependenciesString}`);
        }
        catch (err) {
            console.log(`❌ Failed to run test with ${packageManager}@${packageManagerVersion}${dependenciesString} in ${tmpDir.name}: ${err}`);
            console.log(`Captured stdout: ${logs}`);
            throw err;
        }
        finally {
            yield exec("pulumi", ["destroy", "--stack", stackName, "--yes"], {
                cwd: tmpDir.name,
                env,
            });
            yield exec("pulumi", ["stack", "rm", stackName, "--yes"], {
                cwd: tmpDir.name,
                env,
            });
        }
    });
}
main().catch((error) => {
    console.error(error);
    process.exit(1);
});
//# sourceMappingURL=install-package-tests.js.map